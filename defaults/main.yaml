# =====================
#  Main settings
# =====================

k3s_version: "v1.22.3+k3s1"       # https://github.com/k3s-io/k3s/releases
argocd_version: "v2.3.2"      # https://github.com/argoproj/argo-cd/releases
secrets_version: "1.16.1"         # https://artifacthub.io/packages/helm/bitnami-labs/sealed-secrets
telegraf_chart_version: "1.0.24"  # https://artifacthub.io/packages/helm/influxdata/telegraf
traefik_chart_version: "10.6.2"   # https://artifacthub.io/packages/helm/traefik/traefik

main_domain: "example.org"   # main public DNS domain of your cluster. All services will be exposed as subdomains under this domain
timezone: "Europe/Warsaw"
force_k3s_upgrade: false     # set this from CLI "-e force_k3s_upgrade=true" to upgrade the cluster with Ansible
vpn_enabled: true            # communicate between cluster nodes over VPN, K3S will use {{ flannel_iface }} as main interface when vpn_enabled=true
flannel_iface: wg0           # set this per node if you have multiple VPN interfaces

# configure, if you have multiple clusters and access them by same network/VPN
net_cluster_cidr: "10.42.0.0/16"
net_services_cidr: "10.43.0.0/16"
cluster_data_path: "/var/lib/rancher/k3s"
cluster_api_bind_address: "0.0.0.0"
cluster_api_restrict_access:  # todo restrict access on iptables/ufw
    - "{{ net_cluster_cidr }}"
    - "{{ vpn_cidr }}"
    - "{{ net_services_cidr }}"
administrative_services_restrict_access: # restrict access by subnet/ip to ArgoCD and other administrative services
    - "{{ net_cluster_cidr }}"
    - "{{ vpn_cidr }}"
    - "{{ net_services_cidr }}"
node_labels: ""
node_taints: ""

# =====================
#  GIT repository for a Cluster is a SINGLE SOURCE OF TRUTH
# =====================
cluster_git_repository:
    remote: "git://github.com/smthing"
    branch: "main"
    argocd_read_only_access_key: ""
    deployment_time_access_key: ""  # access key with permissions to write to repository (private ssh-rsa)

# ========
#  ArgoCD
# ========
argocd_git_port: "22"            # same port as in cluster_git_repository.remote option
argocd_git_host: "github.com"    # same host as in cluster_git_repository.remote option
argocd_namespace: "argocd"       # better to not change

argocd_helm_settings: {}
argocd_defaults:
    controller:
        args:
            # adjust those values to higher ones if your cluster has more applications
            statusProcessors: "5"
            operationProcessors: "4"
            appResyncPeriod: "3600"
            selfHealTimeout: "45"
            repoServerTimeoutSeconds: "600"
        affinity:
            nodeAffinity:
                requiredDuringSchedulingIgnoredDuringExecution:
                    nodeSelectorTerms:
                        - matchExpressions:
                            - key: node-role.kubernetes.io/control-plane
                              operator: In
                              values:
                                  - "true"
    dex:
        enabled: false

    redis:
        affinity:
            nodeAffinity:
                requiredDuringSchedulingIgnoredDuringExecution:
                    nodeSelectorTerms:
                        - matchExpressions:
                            - key: node-role.kubernetes.io/control-plane
                              operator: In
                              values:
                                  - "true"
    server:
        extraArgs: ['--insecure']
        config:
            application.instanceLabelKey: argocd.argoproj.io/instance
            ui.bannercontent: Brought to you by Open Source work of anarchist tech-collective - Riotkit
            ui.bannerUrl: https://github.com/riotkit
            url: "https://{{ argocd_subdomain }}.{{ main_domain }}"
        affinity:
            nodeAffinity:
                requiredDuringSchedulingIgnoredDuringExecution:
                    nodeSelectorTerms:
                        - matchExpressions:
                            - key: node-role.kubernetes.io/control-plane
                              operator: In
                              values:
                                  - "true"


    # ingress is disabled by default because we have a separate definition created especially for Traefik with
    # additional wall of Basic Auth
    ingress:
        enabled: false
    ingressGrpc:
        enabled: false

    configs:
        knownHosts:
            data:
                #
                # ArgoCD requires to have a collection of public SSH keys of remote git repositories it is going to pull
                #
                ssh_known_hosts: |
                    bitbucket.org ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAubiN81eDcafrgMeLzaFPsw2kNvEcqTKl/VqLat/MaB33pZy0y3rJZtnqwR2qOOvbwKZYKiEO1O6VqNEBxKvJJelCq0dTXWT5pbO2gDXC6h6QDXCaHo6pOHGPUy+YBaGQRGuSusMEASYiWunYN0vCAI8QaXnWMXNMdFP3jHAJH0eDsoiGnLPBlBp4TNm6rYI74nMzgz3B9IikW4WVK+dc8KZJZWYjAuORU3jc1c/NPskD2ASinf8v3xnfXeukU0sJ5N6m5E8VLjObPEO+mN2t/FZTMZLiFqPWc/ALSqnMnnhwrNi2rbfg/rd/IpL8Le3pSBne8+seeFVBoGqzHM9yXw==
                    github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==
                    gitlab.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBFSMqzJeV9rUzU4kWitGjeR4PWSa29SPqJ1fVkhtj3Hw9xjLVXVYrU9QlYWrOLXBpQ6KWjbjTDTdDkoohFzgbEY=
                    gitlab.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIAfuCHKVTjquxvt6CM6tdG4SLp1Btn/nOeHHE5UOzRdf
                    gitlab.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCsj2bNKTBSpIYDEGk9KxsGh3mySTRgMtXL583qmBpzeQ+jqCMRgBqB98u3z++J1sKlXHWfM9dyhSevkMwSbhoR8XIq/U0tCNyokEi/ueaBMCvbcTHhO7FcwzY92WK4Yt0aGROY5qX2UKSeOvuP4D6TPqKF1onrSzH9bx9XUf2lEdWT/ia1NEKjunUqu1xOB/StKDHMoX4/OKyIzuS0q/T1zOATthvasJFoPrAjkohTyaDUz2LN5JoH839hViyEG82yB+MjcFV5MU3N1l1QL3cVUCh93xSaua1N85qivl+siMkPGbO5xR/En4iEY6K2XPASUEMaieWVNTRCtJ4S8H+9
                    ssh.dev.azure.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H
                    vs-ssh.visualstudio.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H
                    {{ ssh_known_host_results.stdout }}

        credentialTemplates:
            #
            # Read-only access to GIT repository is required using a private key
            # Hint: Create a service account in Github, Gitea, Gitlab, etc.
            #
            ssh-creds:
                url: "{{ cluster_git_repository.remote }}"
                sshPrivateKey: "{{ cluster_git_repository.argocd_read_only_access_key }}"

        #
        # List of enabled GIT repositories to be watched by ArgoCD
        #
        repositories:
            riotkit-cluster-root:
                url: "{{ cluster_git_repository.remote }}"


# ============================
#  Tools installed on machine
# ============================
tool_helm_version: "v3.7.1"       # https://github.com/helm/helm/releases
tool_kubeseal_version: "v0.16.0"  # https://github.com/bitnami-labs/sealed-secrets/releases (notice: only versions with released asset "kubeseal-linux-amd64")


# =====================
#  Traefik Helm Chart
# =====================
traefik_subdomain: "traefik"
traefik_password: "riotkit"
traefik_tls_staging: "true"
traefik_tls_email: "example@example.org"


# allows to override "traefik_defaults" - the dictionary hashes will be merged recursively
traefik_helm_settings: {}

traefik_defaults:
    rbac:
        enabled: true
    additionalArguments:
        - "--certificatesresolvers.default.acme.email={{ traefik_tls_email }}"
        - "--certificatesresolvers.default.acme.storage=/data/acme.json"
        - "--certificatesresolvers.default.acme.tlschallenge=true"
        - "--certificatesresolvers.default.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory" # debug

    ingressRoute:
        dashboard:
            enabled: false

    persistence:
        enabled: true
        name: data
        accessMode: ReadWriteOnce
        size: 64Mi
        path: /data

    resources:
       requests:
           cpu: "0"
           memory: "50Mi"
       limits:
          cpu: "1"
          memory: "150Mi"

    providers:
        kubernetesCRD:
            enabled: true
            allowCrossNamespace: true


infracheck_enabled: true
infracheck_domain: "health"
infracheck_max_total_load_average: "2"
infracheck_helm_settings: {}
infracheck_defaults:
    dbVolume:
        storageClassName: local-path
    ingress:
        host: "{{ infracheck_domain }}.{{ main_domain }}"
    settings:
        refresh_time: "600"  # interval between refreshing all checks
        wait_time: "0"       # time in seconds between two checks are running
        check_timeout: "120" # timeout on every check
    checks:
        configuredStr: |
            networking_to_dns.json: |
                {
                    "type": "port-open",
                    "input": {
                        "po_host": "1.1.1.1",
                        "po_port": "53",
                        "po_timeout": "5"
                    }
                }
            max_ram_percentage.json: |
                {
                    "type": "free-ram",
                    "input": {
                        "max_ram_percentage": "85"
                    }
                }
            main_domain_expiration.json: |
                {
                    "type": "domain-expiration",
                    "results_cache_time": "7200",
                    "input": {
                        "domain": "{{ main_domain }}",
                        "alert_days_before": "7"
                    }
                }
            main_domain_tls.json: |
                {
                    "type": "tls",
                    "input": {
                        "domain": "{{ main_domain }}",
                        "alert_days_before": "7"
                    }
                }
            load_average.json: |
                {
                    "type": "load-average-auto",
                    "input": {
                        "maximum_above": "{{ infracheck_max_total_load_average }}",
                        "timing": "15"
                    }
                }
            disk_space.json: |
                {
                    "type": "disk-space",
                    "input": {
                        "dir": "/",
                        "min_req_space": "8"
                    }
                }


# ==============
#  SMTP gateway
# ==============
mail_enabled: true
mail_sending_domain: "{{ main_domain }}"
mail_relay_host: ""
mail_relay_username: ""
mail_relay_password: ""

# ================
#  Sealed Secrets
# ================
secrets_enabled: true
secrets_namespace: "kube-system"

# ====================
#  Telegraf - metrics
# ====================
telegraf_enabled: true
telegraf_agent_interval: "120s"
telegraf_socket_writer_address: "tcp://example.org:8094"
telegraf_certs:
    ca_crt: ...
    tls_crt: ...
    tls_key: ...
