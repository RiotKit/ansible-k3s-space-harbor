- name: Make sure /etc/riotkit directory exists
  become: yes
  become_user: root
  file:
      path: /etc/riotkit
      state: directory
      mode: "u+rw,g-r,o-r"
      owner: root
      group: root

- name: Create alternative resolv.conf
  become: yes
  become_user: root
  template:
      src: etc/resolv.conf
      dest: /etc/riotkit/resolv.conf

- name: Check if k3s is already installed
  register: k3s_installed
  stat:
      path: /etc/rancher/k3s/k3s.yaml

- name: Install K3S primary from get.k3s.io
  become: yes
  become_user: root
  shell: |
      export INSTALL_K3S_VERSION="{{ k3s_version | trim }}";
      curl -sfL https://get.k3s.io | bash -s - --disable traefik \
            --cluster-cidr={{ net_cluster_cidr | trim }} \
            --service-cidr={{ net_services_cidr | trim }} \
            --node-name="{{ node_type }}" \
            --node-label="node-type={{ node_type | trim }}" \
            {%- for label in node_labels %}
            --node-label="{{ label | trim }}" \
            {%- endfor %}
            --node-label="node-instance-title={{ node_instance_title | default(inventory_hostname) | trim }}" \
            {%- for taint in node_taints %}
            --node-taint="{{ taint | trim }}" \
            {%- endfor %}
            {%- if noschedule_on_primary %}
            --node-taint="node-role.kubernetes.io/master:NoSchedule" \
            {%- endif %}
            --with-node-id \
            --node-external-ip={{ node_external_ip | default(ansible_ssh_host) }} \
            {%- if node_internal_ip is defined and node_internal_ip %}
            --node-ip={{ node_internal_ip | trim }} \
            {%- endif %} \
            --resolv-conf=/etc/riotkit/resolv.conf \
            {%- if cluster_api_bind_address is defined and cluster_api_bind_address %}
            --bind-address={{ cluster_api_bind_address }} \
            --node-ip={{ cluster_api_bind_address | trim }} \
            {%- endif %}
            {%- if canal_enabled or cilium_enabled %}
            --disable-network-policy \
            {%- endif %}
            {%- if vpn_enabled and not cilium_enabled %}
                --flannel-iface={{ flannel_iface | trim }} \
                --flannel-backend={{ vpn_flannel_backend }} \
            {%- endif %}
            {%- if cilium_enabled %}
            --flannel-backend=none \
            {%- endif %}
            --data-dir={{ cluster_data_path | trim }} \
            --datastore-endpoint={{ k3s_datastore_endpoint | default("sqlite") }}
  when: not k3s_installed.stat.exists or force_k3s_upgrade

- name: Enable k3s at system startup
  become: yes
  become_user: root
  systemd:
      name: k3s
      enabled: true

- name: Collect node join token as artifact
  become: yes
  become_user: root
  fetch:
      src: /var/lib/rancher/k3s/server/node-token
      dest: artifacts/primary-token
      flat: true

# Only on primary node: apply the Kubernetes resource, so the runtime class will be available inside cluster
- name: Create init-resources directory
  file:
      path: /etc/rancher/init-resources
      state: directory

- name: Create RuntimeClass
  template:
      src: "etc/rancher/init-resources/{{ item }}"
      dest: "/etc/rancher/init-resources/{{ item }}"
  with_items:
      - runsc.runtimeclass.yaml
      - crun.runtimeclass.yaml

- name: Apply RuntimeClass
  shell: "kubectl apply -f /etc/rancher/init-resources/{{ item }}"
  with_items:
      - runsc.runtimeclass.yaml
      - crun.runtimeclass.yaml
