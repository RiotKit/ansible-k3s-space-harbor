- name: Download crun binary
  get_url:
      url: https://github.com/containers/crun/releases/download/{{ crun_version }}/crun-{{ crun_version }}-linux-amd64
      dest: /usr/local/bin/crun
      mode: "u+rwx,g+rx,o+rx"

- name: Download gVisor runsc binary
  get_url:
      url: https://storage.googleapis.com/gvisor/releases/release/latest/x86_64/runsc
      dest: /usr/local/bin/runsc
      mode: "u+rwx,g+rx,o+rx"

- name: Download gVisor shim binary
  get_url:
      url: https://storage.googleapis.com/gvisor/releases/release/latest/x86_64/containerd-shim-runsc-v1
      dest: /usr/local/bin/containerd-shim-runsc-v1
      mode: "u+rwx,g+rx,o+rx"

# Reconfigure containerd
- name: Create build directory
  file:
      path: /tmp/gvisor-config-build
      state: directory

- name: Add helper file to fetch containerd configuration file from K3s
  copy:
      src: files/gvisor/main.go
      dest: /tmp/gvisor-config-build/main.go

# IMPORTANT: containerd config file must be compatible with K3s version, so we download a matching one and extract it using a main.go wrapper
- name: Fetch shim configuration for proper K3s version
  get_url:
      url: "https://raw.githubusercontent.com/k3s-io/k3s/{{ k3s_version }}/pkg/agent/templates/templates_linux.go"
      dest: /tmp/gvisor-config-build/templates_linux.go

- name: Replace package name
  shell: "sed -i 's/package templates/package main/g' /tmp/gvisor-config-build/templates_linux.go"

- name: Generate template
  shell: "cd /tmp/gvisor-config-build && go run ./main.go ./templates_linux.go 2> /var/lib/rancher/k3s/agent/etc/containerd/config.toml.tmpl"

- name: Configure gVisor shim
  template:
      src: etc/containerd/runsc.toml
      dest: /var/lib/rancher/k3s/agent/etc/containerd/runsc.toml

- name: Register in containerd configuration
  blockinfile:
      path: /var/lib/rancher/k3s/agent/etc/containerd/config.toml.tmpl
      block: |
          [plugins.cri.containerd.runtimes.runsc]
              runtime_type = "io.containerd.runsc.v1"
          [plugins.cri.containerd.runtimes.runsc.options]
              TypeUrl = "io.containerd.runsc.v1.options"
              ConfigPath = "/var/lib/rancher/k3s/agent/etc/containerd/runsc.toml"
          
          [plugins.cri.containerd.runtimes.crun]
              runtime_type = "io.containerd.runc.v2"
          [plugins.cri.containerd.runtimes.crun.options]
              BinaryName = "/usr/local/bin/crun"

- name: Make crun default runtime
  lineinfile:
      path: /var/lib/rancher/k3s/agent/etc/containerd/config.toml.tmpl
      line: '  default_runtime_name = "crun"'
      insertafter: '^\[plugins.cri.containerd\]'

# End of containerd reconfiguration

# Only on primary node: apply the Kubernetes resource, so the runtime class will be available inside cluster
- when: node_type == "primary"
  block:
    - name: Create init-resources directory
      file:
          path: /etc/rancher/init-resources
          state: directory

    - name: Create RuntimeClass
      template:
          src: "etc/rancher/init-resources/{{ item }}"
          dest: "/etc/rancher/init-resources/{{ item }}"
      with_items:
          - runsc.runtimeclass.yaml
          - crun.runtimeclass.yaml

    - name: Apply RuntimeClass
      shell: "kubectl apply -f /etc/rancher/init-resources/{{ item }}"
      with_items:
          - runsc.runtimeclass.yaml
          - crun.runtimeclass.yaml
